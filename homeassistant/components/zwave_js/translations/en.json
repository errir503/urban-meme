{
    "config": {
        "abort": {
            "addon_get_discovery_info_failed": "Failed to get Z-Wave JS add-on discovery info.",
            "addon_info_failed": "Failed to get Z-Wave JS add-on info.",
            "addon_install_failed": "Failed to install the Z-Wave JS add-on.",
            "addon_set_config_failed": "Failed to set Z-Wave JS configuration.",
            "addon_start_failed": "Failed to start the Z-Wave JS add-on.",
            "already_configured": "Device is already configured",
            "already_in_progress": "Configuration flow is already in progress",
            "cannot_connect": "Failed to connect",
            "discovery_requires_supervisor": "Discovery requires the supervisor.",
            "not_zwave_device": "Discovered device is not a Z-Wave device."
        },
        "error": {
            "addon_start_failed": "Failed to start the Z-Wave JS add-on. Check the configuration.",
            "cannot_connect": "Failed to connect",
            "invalid_ws_url": "Invalid websocket URL",
            "unknown": "Unexpected error"
        },
        "flow_title": "{name}",
        "progress": {
            "install_addon": "Please wait while the Z-Wave JS add-on installation finishes. This can take several minutes.",
            "start_addon": "Please wait while the Z-Wave JS add-on start completes. This may take some seconds."
        },
        "step": {
            "configure_addon": {
                "data": {
                    "network_key": "Network Key",
                    "s0_legacy_key": "S0 Key (Legacy)",
                    "s2_access_control_key": "S2 Access Control Key",
                    "s2_authenticated_key": "S2 Authenticated Key",
                    "s2_unauthenticated_key": "S2 Unauthenticated Key",
                    "usb_path": "USB Device Path"
                },
                "description": "The add-on will generate security keys if those fields are left empty.",
                "title": "Enter the Z-Wave JS add-on configuration"
            },
            "hassio_confirm": {
                "title": "Set up Z-Wave JS integration with the Z-Wave JS add-on"
            },
            "install_addon": {
                "title": "The Z-Wave JS add-on installation has started"
            },
            "manual": {
                "data": {
                    "url": "URL"
                }
            },
            "on_supervisor": {
                "data": {
                    "use_addon": "Use the Z-Wave JS Supervisor add-on"
                },
                "description": "Do you want to use the Z-Wave JS Supervisor add-on?",
                "title": "Select connection method"
            },
            "start_addon": {
                "title": "The Z-Wave JS add-on is starting."
            },
            "usb_confirm": {
                "description": "Do you want to setup {name} with the Z-Wave JS add-on?"
            },
            "zeroconf_confirm": {
                "description": "Do you want to add the Z-Wave JS Server with home ID {home_id} found at {url} to Home Assistant?",
                "title": "Discovered Z-Wave JS Server"
            }
        }
    },
    "device_automation": {
        "action_type": {
            "clear_lock_usercode": "Clear usercode on {entity_name}",
            "ping": "Ping device",
            "refresh_value": "Refresh the value(s) for {entity_name}",
            "reset_meter": "Reset meters on {subtype}",
            "set_config_parameter": "Set value of config parameter {subtype}",
            "set_lock_usercode": "Set a usercode on {entity_name}",
            "set_value": "Set value of a Z-Wave Value"
        },
        "condition_type": {
            "config_parameter": "Config parameter {subtype} value",
            "node_status": "Node status",
            "value": "Current value of a Z-Wave Value"
        },
        "trigger_type": {
            "event.notification.entry_control": "Sent an Entry Control notification",
            "event.notification.notification": "Sent a notification",
            "event.value_notification.basic": "Basic CC event on {subtype}",
            "event.value_notification.central_scene": "Central Scene action on {subtype}",
            "event.value_notification.scene_activation": "Scene Activation on {subtype}",
            "state.node_status": "Node status changed",
            "zwave_js.value_updated.config_parameter": "Value change on config parameter {subtype}",
            "zwave_js.value_updated.value": "Value change on a Z-Wave JS Value"
        }
    },
    "options": {
        "abort": {
            "addon_get_discovery_info_failed": "Failed to get Z-Wave JS add-on discovery info.",
            "addon_info_failed": "Failed to get Z-Wave JS add-on info.",
            "addon_install_failed": "Failed to install the Z-Wave JS add-on.",
            "addon_set_config_failed": "Failed to set Z-Wave JS configuration.",
            "addon_start_failed": "Failed to start the Z-Wave JS add-on.",
            "already_configured": "Device is already configured",
            "cannot_connect": "Failed to connect",
            "different_device": "The connected USB device is not the same as previously configured for this config entry. Please instead create a new config entry for the new device."
        },
        "error": {
            "cannot_connect": "Failed to connect",
            "invalid_ws_url": "Invalid websocket URL",
            "unknown": "Unexpected error"
        },
        "progress": {
            "install_addon": "Please wait while the Z-Wave JS add-on installation finishes. This can take several minutes.",
            "start_addon": "Please wait while the Z-Wave JS add-on start completes. This may take some seconds."
        },
        "step": {
            "configure_addon": {
                "data": {
                    "emulate_hardware": "Emulate Hardware",
                    "log_level": "Log level",
                    "network_key": "Network Key",
                    "s0_legacy_key": "S0 Key (Legacy)",
                    "s2_access_control_key": "S2 Access Control Key",
                    "s2_authenticated_key": "S2 Authenticated Key",
                    "s2_unauthenticated_key": "S2 Unauthenticated Key",
                    "usb_path": "USB Device Path"
                },
                "description": "The add-on will generate security keys if those fields are left empty.",
                "title": "Enter the Z-Wave JS add-on configuration"
            },
            "install_addon": {
                "title": "The Z-Wave JS add-on installation has started"
            },
            "manual": {
                "data": {
                    "url": "URL"
                }
            },
            "on_supervisor": {
                "data": {
                    "use_addon": "Use the Z-Wave JS Supervisor add-on"
                },
                "description": "Do you want to use the Z-Wave JS Supervisor add-on?",
                "title": "Select connection method"
            },
            "start_addon": {
                "title": "The Z-Wave JS add-on is starting."
            }
        }
    },
    "title": "Z-Wave JS"
}