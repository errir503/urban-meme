{
  "issues": {
    "deprecated_yaml": {
      "title": "Your manually configured MQTT {platform}(s) needs attention",
      "description": "Manually configured MQTT {platform}(s) found under platform key `{platform}`.\n\nPlease move the configuration to the `mqtt` integration key and restart Home Assistant to fix this issue. See the [documentation]({more_info_url}), for more information."
    },
    "deprecated_yaml_broker_settings": {
      "title": "Deprecated MQTT settings found in `configuration.yaml`",
      "description": "The following settings found in `configuration.yaml` were migrated to MQTT config entry and will now override the settings in `configuration.yaml`:\n`{deprecated_settings}`\n\nPlease remove these settings from `configuration.yaml` and restart Home Assistant to fix this issue. See the [documentation]({more_info_url}), for more information."
    }
  },
  "config": {
    "step": {
      "broker": {
        "description": "Please enter the connection information of your MQTT broker.",
        "data": {
          "broker": "Broker",
          "port": "[%key:common::config_flow::data::port%]",
          "username": "[%key:common::config_flow::data::username%]",
          "password": "[%key:common::config_flow::data::password%]",
          "advanced_options": "Advanced options",
          "certificate": "Path to custom CA certificate file",
          "client_id": "Client ID (leave empty to randomly generated one)",
          "client_cert": "Path to a client certificate file",
          "client_key": "Path to a private key file",
          "keepalive": "The time between sending keep alive messages",
          "tls_insecure": "Ignore broker certificate validation",
          "protocol": "MQTT protocol",
          "set_ca_cert": "Broker certificate validation",
          "set_client_cert": "Use a client certificate"
        }
      },
      "hassio_confirm": {
        "title": "MQTT Broker via Home Assistant add-on",
        "description": "Do you want to configure Home Assistant to connect to the MQTT broker provided by the add-on {addon}?",
        "data": {
          "discovery": "Enable discovery"
        }
      }
    },
    "abort": {
      "already_configured": "[%key:common::config_flow::abort::already_configured_service%]",
      "single_instance_allowed": "[%key:common::config_flow::abort::single_instance_allowed%]"
    },
    "error": {
      "bad_birth": "Invalid birth topic",
      "bad_will": "Invalid will topic",
      "bad_discovery_prefix": "Invalid discovery prefix",
      "bad_certificate": "The CA certificate is invalid",
      "bad_client_cert": "Invalid client certiticate, ensure a PEM coded file is supplied",
      "bad_client_key": "Invalid private key, ensure a PEM coded file is supplied without password",
      "bad_client_cert_key": "Client certificate and private are no valid pair",
      "cannot_connect": "[%key:common::config_flow::error::cannot_connect%]",
      "invalid_inclusion": "The client certificate and private key must be configurered together"
    }
  },
  "device_automation": {
    "trigger_type": {
      "button_short_press": "\"{subtype}\" pressed",
      "button_short_release": "\"{subtype}\" released",
      "button_long_press": "\"{subtype}\" continuously pressed",
      "button_long_release": "\"{subtype}\" released after long press",
      "button_double_press": "\"{subtype}\" double clicked",
      "button_triple_press": "\"{subtype}\" triple clicked",
      "button_quadruple_press": "\"{subtype}\" quadruple clicked",
      "button_quintuple_press": "\"{subtype}\" quintuple clicked"
    },
    "trigger_subtype": {
      "turn_on": "Turn on",
      "turn_off": "Turn off",
      "button_1": "First button",
      "button_2": "Second button",
      "button_3": "Third button",
      "button_4": "Fourth button",
      "button_5": "Fifth button",
      "button_6": "Sixth button"
    }
  },
  "options": {
    "step": {
      "broker": {
        "title": "Broker options",
        "description": "Please enter the connection information of your MQTT broker.",
        "data": {
          "broker": "Broker",
          "port": "[%key:common::config_flow::data::port%]",
          "username": "[%key:common::config_flow::data::username%]",
          "password": "[%key:common::config_flow::data::password%]",
          "advanced_options": "Advanced options",
          "certificate": "Upload custom CA certificate file",
          "client_id": "Client ID (leave empty to randomly generated one)",
          "client_cert": "Upload client certificate file",
          "client_key": "Upload private key file",
          "keepalive": "The time between sending keep alive messages",
          "tls_insecure": "Ignore broker certificate validation",
          "protocol": "MQTT protocol",
          "set_ca_cert": "Broker certificate validation",
          "set_client_cert": "Use a client certificate"
        }
      },
      "options": {
        "title": "MQTT options",
        "description": "Discovery - If discovery is enabled (recommended), Home Assistant will automatically discover devices and entities which publish their configuration on the MQTT broker. If discovery is disabled, all configuration must be done manually.\nDiscovery prefix - The prefix a configuration topic for automatic discovery must start with.\nBirth message - The birth message will be sent each time Home Assistant (re)connects to the MQTT broker.\nWill message - The will message will be sent each time Home Assistant loses its connection to the broker, both in case of a clean (e.g. Home Assistant shutting down) and in case of an unclean (e.g. Home Assistant crashing or losing its network connection) disconnect.",
        "data": {
          "discovery": "Enable discovery",
          "discovery_prefix": "Discovery prefix",
          "birth_enable": "Enable birth message",
          "birth_topic": "Birth message topic",
          "birth_payload": "Birth message payload",
          "birth_qos": "Birth message QoS",
          "birth_retain": "Birth message retain",
          "will_enable": "Enable will message",
          "will_topic": "Will message topic",
          "will_payload": "Will message payload",
          "will_qos": "Will message QoS",
          "will_retain": "Will message retain"
        }
      }
    },
    "error": {
      "bad_birth": "Invalid birth topic",
      "bad_will": "Invalid will topic",
      "bad_discovery_prefix": "Invalid discovery prefix",
      "bad_certificate": "The CA certificate is invalid",
      "bad_client_cert": "Invalid client certiticate, ensure a PEM coded file is supplied",
      "bad_client_key": "Invalid private key, ensure a PEM coded file is supplied without password",
      "bad_client_cert_key": "Client certificate and private are no valid pair",
      "cannot_connect": "[%key:common::config_flow::error::cannot_connect%]",
      "invalid_inclusion": "The client certificate and private key must be configured together"
    }
  }
}
