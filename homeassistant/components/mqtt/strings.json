{
  "issues": {
    "deprecation_mqtt_legacy_vacuum_yaml": {
      "title": "MQTT vacuum entities with legacy schema found in your configuration.yaml",
      "description": "MQTT vacuum entities that use the legacy schema are deprecated, please adjust your configuration.yaml and restart Home Assistant to fix this issue."
    },
    "deprecation_mqtt_legacy_vacuum_discovery": {
      "title": "MQTT vacuum entities with legacy schema added through MQTT discovery",
      "description": "MQTT vacuum entities that use the legacy schema are deprecated, please adjust your devices to use the correct schema and restart Home Assistant to fix this issue."
    },
    "entity_name_is_device_name_yaml": {
      "title": "Manual configured MQTT entities with a name that is equal to the device name",
      "description": "Some MQTT entities have an entity name equal to the device name. This is not expected. The entity name is set to `null` as a work-a-round to avoid a duplicate name. Please update your configuration and restart Home Assistant to fix this issue.\n\nList of affected entities:\n\n{config}"
    },
    "entity_name_startswith_device_name_yaml": {
      "title": "Manual configured MQTT entities with a name that starts with the device name",
      "description": "Some MQTT entities have an entity name that starts with the device name. This is not expected. To avoid a duplicate name the device name prefix is stripped off the entity name as a work-a-round. Please update your configuration and restart Home Assistant to fix this issue. \n\nList of affected entities:\n\n{config}"
    },
    "deprecated_climate_aux_property": {
      "title": "MQTT entities with auxiliary heat support found",
      "description": "Entity `{entity_id}` has auxiliary heat support enabled, which has been deprecated for MQTT climate devices. Please adjust your configuration and remove deprecated config options from your configuration and restart Home Assistant to fix this issue."
    },
    "invalid_entity_category": {
      "title": "An MQTT {domain} with an invalid entity category was found",
      "description": "Home Assistant detected a manually configured MQTT `{domain}` entity that has an `entity_category` set to `config`. \nConfiguration file: **{config_file}**\nNear line: **{line}**\n\nConfig with invalid setting:\n\n```yaml\n{config}\n```\n\nWhen set, make sure `entity_category` for a `{domain}` is set to `diagnostic` or `None`. Update your YAML configuration and restart Home Assistant to fix this issue."
    },
    "invalid_platform_config": {
      "title": "Invalid config found for mqtt {domain} item",
      "description": "Home Assistant detected an invalid config for a manually configured item.\n\nPlatform domain: **{domain}**\nConfiguration file: **{config_file}**\nNear line: **{line}**\nConfiguration found:\n```yaml\n{config}\n```\nError: **{error}**.\n\nMake sure the configuration is valid and [reload](/developer-tools/yaml) the manually configured MQTT items or restart Home Assistant to fix this issue."
    }
  },
  "config": {
    "step": {
      "broker": {
        "description": "Please enter the connection information of your MQTT broker.",
        "data": {
          "broker": "Broker",
          "port": "[%key:common::config_flow::data::port%]",
          "username": "[%key:common::config_flow::data::username%]",
          "password": "[%key:common::config_flow::data::password%]",
          "advanced_options": "Advanced options",
          "certificate": "Upload custom CA certificate file",
          "client_id": "Client ID (leave empty to randomly generated one)",
          "client_cert": "Upload client certificate file",
          "client_key": "Upload private key file",
          "keepalive": "The time between sending keep alive messages",
          "tls_insecure": "Ignore broker certificate validation",
          "protocol": "MQTT protocol",
          "set_ca_cert": "Broker certificate validation",
          "set_client_cert": "Use a client certificate",
          "transport": "MQTT transport",
          "ws_headers": "WebSocket headers in JSON format",
          "ws_path": "WebSocket path"
        }
      },
      "hassio_confirm": {
        "title": "MQTT Broker via Home Assistant add-on",
        "description": "Do you want to configure Home Assistant to connect to the MQTT broker provided by the add-on {addon}?",
        "data": {
          "discovery": "Enable discovery"
        }
      }
    },
    "abort": {
      "already_configured": "[%key:common::config_flow::abort::already_configured_service%]",
      "single_instance_allowed": "[%key:common::config_flow::abort::single_instance_allowed%]"
    },
    "error": {
      "bad_birth": "Invalid birth topic",
      "bad_will": "Invalid will topic",
      "bad_discovery_prefix": "Invalid discovery prefix",
      "bad_certificate": "The CA certificate is invalid",
      "bad_client_cert": "Invalid client certificate, ensure a PEM coded file is supplied",
      "bad_client_key": "Invalid private key, ensure a PEM coded file is supplied without password",
      "bad_client_cert_key": "Client certificate and private key are not a valid pair",
      "bad_ws_headers": "Supply valid HTTP headers as a JSON object",
      "cannot_connect": "[%key:common::config_flow::error::cannot_connect%]",
      "invalid_inclusion": "The client certificate and private key must be configurered together"
    }
  },
  "device_automation": {
    "trigger_type": {
      "button_short_press": "\"{subtype}\" pressed",
      "button_short_release": "\"{subtype}\" released",
      "button_long_press": "\"{subtype}\" continuously pressed",
      "button_long_release": "\"{subtype}\" released after long press",
      "button_double_press": "\"{subtype}\" double clicked",
      "button_triple_press": "\"{subtype}\" triple clicked",
      "button_quadruple_press": "\"{subtype}\" quadruple clicked",
      "button_quintuple_press": "\"{subtype}\" quintuple clicked"
    },
    "trigger_subtype": {
      "turn_on": "[%key:common::action::turn_on%]",
      "turn_off": "[%key:common::action::turn_off%]",
      "button_1": "First button",
      "button_2": "Second button",
      "button_3": "Third button",
      "button_4": "Fourth button",
      "button_5": "Fifth button",
      "button_6": "Sixth button"
    }
  },
  "options": {
    "step": {
      "broker": {
        "title": "Broker options",
        "description": "[%key:component::mqtt::config::step::broker::description%]",
        "data": {
          "broker": "[%key:component::mqtt::config::step::broker::data::broker%]",
          "port": "[%key:common::config_flow::data::port%]",
          "username": "[%key:common::config_flow::data::username%]",
          "password": "[%key:common::config_flow::data::password%]",
          "advanced_options": "[%key:component::mqtt::config::step::broker::data::advanced_options%]",
          "certificate": "[%key:component::mqtt::config::step::broker::data::certificate%]",
          "client_id": "[%key:component::mqtt::config::step::broker::data::client_id%]",
          "client_cert": "[%key:component::mqtt::config::step::broker::data::client_cert%]",
          "client_key": "[%key:component::mqtt::config::step::broker::data::client_key%]",
          "keepalive": "[%key:component::mqtt::config::step::broker::data::keepalive%]",
          "tls_insecure": "[%key:component::mqtt::config::step::broker::data::tls_insecure%]",
          "protocol": "[%key:component::mqtt::config::step::broker::data::protocol%]",
          "set_ca_cert": "[%key:component::mqtt::config::step::broker::data::set_ca_cert%]",
          "set_client_cert": "[%key:component::mqtt::config::step::broker::data::set_client_cert%]",
          "transport": "[%key:component::mqtt::config::step::broker::data::transport%]",
          "ws_headers": "[%key:component::mqtt::config::step::broker::data::ws_headers%]",
          "ws_path": "[%key:component::mqtt::config::step::broker::data::ws_path%]"
        }
      },
      "options": {
        "title": "MQTT options",
        "description": "Discovery - If discovery is enabled (recommended), Home Assistant will automatically discover devices and entities which publish their configuration on the MQTT broker. If discovery is disabled, all configuration must be done manually.\nDiscovery prefix - The prefix a configuration topic for automatic discovery must start with.\nBirth message - The birth message will be sent each time Home Assistant (re)connects to the MQTT broker.\nWill message - The will message will be sent each time Home Assistant loses its connection to the broker, both in case of a clean (e.g. Home Assistant shutting down) and in case of an unclean (e.g. Home Assistant crashing or losing its network connection) disconnect.",
        "data": {
          "discovery": "[%key:component::mqtt::config::step::hassio_confirm::data::discovery%]",
          "discovery_prefix": "Discovery prefix",
          "birth_enable": "Enable birth message",
          "birth_topic": "Birth message topic",
          "birth_payload": "Birth message payload",
          "birth_qos": "Birth message QoS",
          "birth_retain": "Birth message retain",
          "will_enable": "Enable will message",
          "will_topic": "Will message topic",
          "will_payload": "Will message payload",
          "will_qos": "Will message QoS",
          "will_retain": "Will message retain"
        }
      }
    },
    "error": {
      "bad_birth": "[%key:component::mqtt::config::error::bad_birth%]",
      "bad_will": "[%key:component::mqtt::config::error::bad_will%]",
      "bad_discovery_prefix": "[%key:component::mqtt::config::error::bad_discovery_prefix%]",
      "bad_certificate": "[%key:component::mqtt::config::error::bad_certificate%]",
      "bad_client_cert": "[%key:component::mqtt::config::error::bad_client_cert%]",
      "bad_client_key": "[%key:component::mqtt::config::error::bad_client_key%]",
      "bad_client_cert_key": "[%key:component::mqtt::config::error::bad_client_cert_key%]",
      "bad_ws_headers": "[%key:component::mqtt::config::error::bad_ws_headers%]",
      "cannot_connect": "[%key:common::config_flow::error::cannot_connect%]",
      "invalid_inclusion": "[%key:component::mqtt::config::error::invalid_inclusion%]"
    }
  },
  "selector": {
    "set_ca_cert": {
      "options": {
        "off": "[%key:common::state::off%]",
        "auto": "Auto",
        "custom": "Custom"
      }
    }
  },
  "services": {
    "publish": {
      "name": "Publish",
      "description": "Publishes a message to an MQTT topic.",
      "fields": {
        "topic": {
          "name": "Topic",
          "description": "Topic to publish to."
        },
        "payload": {
          "name": "Payload",
          "description": "The payload to publish."
        },
        "payload_template": {
          "name": "Payload template",
          "description": "Template to render as a payload value. If a payload is provided, the template is ignored."
        },
        "qos": {
          "name": "QoS",
          "description": "Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once."
        },
        "retain": {
          "name": "Retain",
          "description": "If the message should have the retain flag set. If set, the broker stores the most recent message on a topic."
        }
      }
    },
    "dump": {
      "name": "Export",
      "description": "Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.",
      "fields": {
        "topic": {
          "name": "[%key:component::mqtt::services::publish::fields::topic::name%]",
          "description": "Topic to listen to."
        },
        "duration": {
          "name": "Duration",
          "description": "How long we should listen for messages in seconds."
        }
      }
    },
    "reload": {
      "name": "[%key:common::action::reload%]",
      "description": "Reloads MQTT entities from the YAML-configuration."
    }
  },
  "exceptions": {
    "invalid_platform_config": {
      "message": "Reloading YAML config for manually configured MQTT `{domain}` failed. See logs for more details."
    }
  }
}
