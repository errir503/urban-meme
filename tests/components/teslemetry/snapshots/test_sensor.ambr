# serializer version: 1
# name: test_sensors[sensor.energy_site_battery_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_battery_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Battery power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'battery_power',
    'unique_id': '123456-battery_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_battery_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Battery power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '5.06',
  })
# ---
# name: test_sensors[sensor.energy_site_battery_power-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Battery power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '5.06',
  })
# ---
# name: test_sensors[sensor.energy_site_energy_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.energy_site_energy_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY_STORAGE: 'energy_storage'>,
    'original_icon': None,
    'original_name': 'Energy left',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'energy_left',
    'unique_id': '123456-energy_left',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_energy_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy_storage',
      'friendly_name': 'Energy Site Energy left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_energy_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '38.8964736842105',
  })
# ---
# name: test_sensors[sensor.energy_site_energy_left-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy_storage',
      'friendly_name': 'Energy Site Energy left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_energy_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '38.8964736842105',
  })
# ---
# name: test_sensors[sensor.energy_site_generator_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_generator_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Generator power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'generator_power',
    'unique_id': '123456-generator_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_generator_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Generator power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_generator_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_generator_power-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Generator power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_generator_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Grid power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_power',
    'unique_id': '123456-grid_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_grid_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Grid power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_power-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Grid power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_services_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_services_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Grid services power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_services_power',
    'unique_id': '123456-grid_services_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_grid_services_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Grid services power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_services_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_services_power-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Grid services power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_services_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_load_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_load_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Load power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'load_power',
    'unique_id': '123456-load_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_load_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Load power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_load_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '6.245',
  })
# ---
# name: test_sensors[sensor.energy_site_load_power-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Load power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_load_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '6.245',
  })
# ---
# name: test_sensors[sensor.energy_site_none-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_none',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': None,
    'original_name': None,
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'island_status',
    'unique_id': '123456-island_status',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.energy_site_none-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Energy Site None',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_none',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on_grid',
  })
# ---
# name: test_sensors[sensor.energy_site_none-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Energy Site None',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_none',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'on_grid',
  })
# ---
# name: test_sensors[sensor.energy_site_percentage_charged-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_percentage_charged',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Percentage charged',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'percentage_charged',
    'unique_id': '123456-percentage_charged',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors[sensor.energy_site_percentage_charged-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Energy Site Percentage charged',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_percentage_charged',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '95.5053740373966',
  })
# ---
# name: test_sensors[sensor.energy_site_percentage_charged-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Energy Site Percentage charged',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_percentage_charged',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '95.5053740373966',
  })
# ---
# name: test_sensors[sensor.energy_site_solar_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_solar_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Solar power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'solar_power',
    'unique_id': '123456-solar_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_solar_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Solar power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_solar_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1.185',
  })
# ---
# name: test_sensors[sensor.energy_site_solar_power-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Solar power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_solar_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '1.185',
  })
# ---
# name: test_sensors[sensor.energy_site_total_pack_energy-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.energy_site_total_pack_energy',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY_STORAGE: 'energy_storage'>,
    'original_icon': None,
    'original_name': 'Total pack energy',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'total_pack_energy',
    'unique_id': '123456-total_pack_energy',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_total_pack_energy-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy_storage',
      'friendly_name': 'Energy Site Total pack energy',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_total_pack_energy',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '40.727',
  })
# ---
# name: test_sensors[sensor.energy_site_total_pack_energy-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy_storage',
      'friendly_name': 'Energy Site Total pack energy',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_total_pack_energy',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '40.727',
  })
# ---
# name: test_sensors[sensor.test_battery_level-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_battery_level',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Battery level',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_battery_level',
    'unique_id': 'VINVINVIN-charge_state_battery_level',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_battery_level-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Battery level',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_battery_level',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_battery_level-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Battery level',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_battery_level',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_battery_range-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_battery_range',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Battery range',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_battery_range',
    'unique_id': 'VINVINVIN-charge_state_battery_range',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_battery_range-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Battery range',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_battery_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_battery_range-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Battery range',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_battery_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_charge_cable-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_charge_cable',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Charge cable',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_conn_charge_cable',
    'unique_id': 'VINVINVIN-charge_state_conn_charge_cable',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_charge_cable-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Charge cable',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charge_cable',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_charge_cable-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Charge cable',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charge_cable',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_charge_energy_added-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_charge_energy_added',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Charge energy added',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charge_energy_added',
    'unique_id': 'VINVINVIN-charge_state_charge_energy_added',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_charge_energy_added-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Charge energy added',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charge_energy_added',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_charge_energy_added-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Charge energy added',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charge_energy_added',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_charge_rate-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_charge_rate',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Charge rate',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charge_rate',
    'unique_id': 'VINVINVIN-charge_state_charge_rate',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_charge_rate-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Charge rate',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charge_rate',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_charge_rate-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Charge rate',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charge_rate',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_charger_current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_charger_current',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Charger current',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charger_actual_current',
    'unique_id': 'VINVINVIN-charge_state_charger_actual_current',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_charger_current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Charger current',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charger_current',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_charger_current-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Charger current',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charger_current',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_charger_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_charger_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Charger power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charger_power',
    'unique_id': 'VINVINVIN-charge_state_charger_power',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_charger_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Charger power',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charger_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_charger_power-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Charger power',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charger_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_charger_voltage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_charger_voltage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Charger voltage',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charger_voltage',
    'unique_id': 'VINVINVIN-charge_state_charger_voltage',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_charger_voltage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Charger voltage',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charger_voltage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_charger_voltage-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Charger voltage',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charger_voltage',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_charging-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_charging',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Charging',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charging_state',
    'unique_id': 'VINVINVIN-charge_state_charging_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_charging-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Charging',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charging',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_charging-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Charging',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charging',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_distance_to_arrival-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_distance_to_arrival',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Distance to arrival',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_miles_to_arrival',
    'unique_id': 'VINVINVIN-drive_state_active_route_miles_to_arrival',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_distance_to_arrival-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Distance to arrival',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_distance_to_arrival',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_distance_to_arrival-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Distance to arrival',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_distance_to_arrival',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_driver_temperature_setting-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_driver_temperature_setting',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Driver temperature setting',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_driver_temp_setting',
    'unique_id': 'VINVINVIN-climate_state_driver_temp_setting',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_driver_temperature_setting-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Driver temperature setting',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_driver_temperature_setting',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_driver_temperature_setting-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Driver temperature setting',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_driver_temperature_setting',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_estimate_battery_range-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_estimate_battery_range',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Estimate battery range',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_est_battery_range',
    'unique_id': 'VINVINVIN-charge_state_est_battery_range',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_estimate_battery_range-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Estimate battery range',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_estimate_battery_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_estimate_battery_range-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Estimate battery range',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_estimate_battery_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_fast_charger_type-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_fast_charger_type',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Fast charger type',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_fast_charger_type',
    'unique_id': 'VINVINVIN-charge_state_fast_charger_type',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_fast_charger_type-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Fast charger type',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_fast_charger_type',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_fast_charger_type-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Fast charger type',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_fast_charger_type',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_ideal_battery_range-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_ideal_battery_range',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Ideal battery range',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_ideal_battery_range',
    'unique_id': 'VINVINVIN-charge_state_ideal_battery_range',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_ideal_battery_range-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Ideal battery range',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_ideal_battery_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_ideal_battery_range-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Ideal battery range',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_ideal_battery_range',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_inside_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_inside_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Inside temperature',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_inside_temp',
    'unique_id': 'VINVINVIN-climate_state_inside_temp',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_inside_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Inside temperature',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_inside_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_inside_temperature-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Inside temperature',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_inside_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_odometer-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_odometer',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Odometer',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_odometer',
    'unique_id': 'VINVINVIN-vehicle_state_odometer',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_odometer-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Odometer',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_odometer',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_odometer-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Odometer',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_odometer',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_outside_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_outside_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Outside temperature',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_outside_temp',
    'unique_id': 'VINVINVIN-climate_state_outside_temp',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_outside_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Outside temperature',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_outside_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_outside_temperature-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Outside temperature',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_outside_temperature',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_passenger_temperature_setting-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_passenger_temperature_setting',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Passenger temperature setting',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_passenger_temp_setting',
    'unique_id': 'VINVINVIN-climate_state_passenger_temp_setting',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_passenger_temperature_setting-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Passenger temperature setting',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_passenger_temperature_setting',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_passenger_temperature_setting-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Passenger temperature setting',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_passenger_temperature_setting',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_power',
    'unique_id': 'VINVINVIN-drive_state_power',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Power',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_power-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Power',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_shift_state-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_shift_state',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Shift state',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_shift_state',
    'unique_id': 'VINVINVIN-drive_state_shift_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_shift_state-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Shift state',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_shift_state',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_shift_state-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Shift state',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_shift_state',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_speed-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_speed',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Speed',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_speed',
    'unique_id': 'VINVINVIN-drive_state_speed',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_speed-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Speed',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_speed',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_speed-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Speed',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_speed',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_state_of_charge_at_arrival-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_state_of_charge_at_arrival',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'State of charge at arrival',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_energy_at_arrival',
    'unique_id': 'VINVINVIN-drive_state_active_route_energy_at_arrival',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_state_of_charge_at_arrival-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test State of charge at arrival',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_state_of_charge_at_arrival',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_state_of_charge_at_arrival-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test State of charge at arrival',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_state_of_charge_at_arrival',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_time_to_arrival-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_time_to_arrival',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Time to arrival',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_minutes_to_arrival',
    'unique_id': 'VINVINVIN-drive_state_active_route_minutes_to_arrival',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_time_to_arrival-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'timestamp',
      'friendly_name': 'Test Time to arrival',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_time_to_arrival',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2024-01-01T00:00:06+00:00',
  })
# ---
# name: test_sensors[sensor.test_time_to_arrival-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'timestamp',
      'friendly_name': 'Test Time to arrival',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_time_to_arrival',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_sensors[sensor.test_time_to_full_charge-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_time_to_full_charge',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Time to full charge',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_minutes_to_full_charge',
    'unique_id': 'VINVINVIN-charge_state_minutes_to_full_charge',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_time_to_full_charge-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'timestamp',
      'friendly_name': 'Test Time to full charge',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_time_to_full_charge',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_sensors[sensor.test_time_to_full_charge-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'timestamp',
      'friendly_name': 'Test Time to full charge',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_time_to_full_charge',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unavailable',
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_front_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_tire_pressure_front_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Tire pressure front left',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_pressure_fl',
    'unique_id': 'VINVINVIN-vehicle_state_tpms_pressure_fl',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_front_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Tire pressure front left',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_front_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_front_left-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Tire pressure front left',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_front_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_front_right-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_tire_pressure_front_right',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Tire pressure front right',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_pressure_fr',
    'unique_id': 'VINVINVIN-vehicle_state_tpms_pressure_fr',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_front_right-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Tire pressure front right',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_front_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_front_right-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Tire pressure front right',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_front_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_rear_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_tire_pressure_rear_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Tire pressure rear left',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_pressure_rl',
    'unique_id': 'VINVINVIN-vehicle_state_tpms_pressure_rl',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_rear_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Tire pressure rear left',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_rear_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_rear_left-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Tire pressure rear left',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_rear_left',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_rear_right-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_tire_pressure_rear_right',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Tire pressure rear right',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_pressure_rr',
    'unique_id': 'VINVINVIN-vehicle_state_tpms_pressure_rr',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_rear_right-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Tire pressure rear right',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_rear_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_rear_right-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Tire pressure rear right',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_rear_right',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_traffic_delay-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_traffic_delay',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Traffic delay',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_traffic_minutes_delay',
    'unique_id': 'VINVINVIN-drive_state_active_route_traffic_minutes_delay',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_traffic_delay-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Traffic delay',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_traffic_delay',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_traffic_delay-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Traffic delay',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_traffic_delay',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_usable_battery_level-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_usable_battery_level',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Usable battery level',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_usable_battery_level',
    'unique_id': 'VINVINVIN-charge_state_usable_battery_level',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_usable_battery_level-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Usable battery level',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_usable_battery_level',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_usable_battery_level-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Usable battery level',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_usable_battery_level',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.wall_connector_fault_state_code-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.wall_connector_fault_state_code',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Fault state code',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_fault_state',
    'unique_id': '123456-abd-123-wall_connector_fault_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_fault_state_code-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Fault state code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_fault_state_code',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_fault_state_code-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Fault state code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_fault_state_code',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_fault_state_code_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.wall_connector_fault_state_code_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Fault state code',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_fault_state',
    'unique_id': '123456-bcd-234-wall_connector_fault_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_fault_state_code_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Fault state code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_fault_state_code_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_fault_state_code_2-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Fault state code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_fault_state_code_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.wall_connector_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_power',
    'unique_id': '123456-abd-123-wall_connector_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.wall_connector_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Wall Connector Power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.wall_connector_power-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Wall Connector Power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_power',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.wall_connector_power_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.wall_connector_power_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_power',
    'unique_id': '123456-bcd-234-wall_connector_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.wall_connector_power_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Wall Connector Power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_power_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.wall_connector_power_2-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Wall Connector Power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_power_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.wall_connector_state_code-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.wall_connector_state_code',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'State code',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_state',
    'unique_id': '123456-abd-123-wall_connector_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_state_code-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector State code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_state_code',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_state_code-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector State code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_state_code',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_state_code_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.wall_connector_state_code_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'State code',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_state',
    'unique_id': '123456-bcd-234-wall_connector_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_state_code_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector State code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_state_code_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_state_code_2-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector State code',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_state_code_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_vehicle-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.wall_connector_vehicle',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Vehicle',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vin',
    'unique_id': '123456-abd-123-vin',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_vehicle-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Vehicle',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_vehicle',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.wall_connector_vehicle-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Vehicle',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_vehicle',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.wall_connector_vehicle_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.wall_connector_vehicle_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'labels': set({
    }),
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': None,
    'original_name': 'Vehicle',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vin',
    'unique_id': '123456-bcd-234-vin',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_vehicle_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Vehicle',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_vehicle_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.wall_connector_vehicle_2-statealt]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Vehicle',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_vehicle_2',
    'last_changed': <ANY>,
    'last_reported': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
